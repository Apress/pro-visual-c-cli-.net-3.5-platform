#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Xml.dll>
#using <System.Web.Services.dll>
#using <System.EnterpriseServices.dll>
#using <System.Data.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by wsdl, Version=2.0.50727.1432.
// 
namespace AuthorWS {
    using namespace System::Diagnostics;
    using namespace System::Web::Services;
    using namespace System::ComponentModel;
    using namespace System::Web::Services::Protocols;
    using namespace System;
    using namespace System::Xml::Serialization;
    using namespace System::Data;
    using namespace System;
    ref class AuthorClass;
    ref class GetAuthorsCompletedEventArgs;
    
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.1432")]
    public delegate System::Void GetAuthorsCompletedEventHandler(System::Object^  sender, AuthorWS::GetAuthorsCompletedEventArgs^  e);
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.1432")]
    public delegate System::Void UpdateAuthorsCompletedEventHandler(System::Object^  sender, System::ComponentModel::AsyncCompletedEventArgs^  e);
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.1432"), 
    System::Diagnostics::DebuggerStepThroughAttribute, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::Web::Services::WebServiceBindingAttribute(Name=L"AuthorClassSoap", Namespace=L"TODO: Enter Unique URL")]
    public ref class AuthorClass : public System::Web::Services::Protocols::SoapHttpClientProtocol {
        
        private: System::Threading::SendOrPostCallback^  GetAuthorsOperationCompleted;
        
        private: System::Threading::SendOrPostCallback^  UpdateAuthorsOperationCompleted;
        
        /// <remarks/>
        public: event AuthorWS::GetAuthorsCompletedEventHandler^  GetAuthorsCompleted;
        
        /// <remarks/>
        public: event AuthorWS::UpdateAuthorsCompletedEventHandler^  UpdateAuthorsCompleted;
        
        /// <remarks/>
        public: AuthorClass();
        /// <remarks/>
        public: [System::Web::Services::Protocols::SoapDocumentMethodAttribute(L"TODO: Enter Unique URL/GetAuthors", RequestNamespace=L"TODO: Enter Unique URL", 
            ResponseNamespace=L"TODO: Enter Unique URL", Use=System::Web::Services::Description::SoapBindingUse::Literal, ParameterStyle=System::Web::Services::Protocols::SoapParameterStyle::Wrapped)]
        System::Data::DataSet^  GetAuthors();
        
        /// <remarks/>
        public: System::IAsyncResult^  BeginGetAuthors(System::AsyncCallback^  callback, System::Object^  asyncState);
        
        /// <remarks/>
        public: System::Data::DataSet^  EndGetAuthors(System::IAsyncResult^  asyncResult);
        
        /// <remarks/>
        public: System::Void GetAuthorsAsync();
        
        /// <remarks/>
        public: System::Void GetAuthorsAsync(System::Object^  userState);
        
        private: System::Void OnGetAuthorsOperationCompleted(System::Object^  arg);
        
        /// <remarks/>
        public: [System::Web::Services::Protocols::SoapDocumentMethodAttribute(L"TODO: Enter Unique URL/UpdateAuthors", RequestNamespace=L"TODO: Enter Unique URL", 
            ResponseNamespace=L"TODO: Enter Unique URL", Use=System::Web::Services::Description::SoapBindingUse::Literal, ParameterStyle=System::Web::Services::Protocols::SoapParameterStyle::Wrapped)]
        System::Void UpdateAuthors(System::Data::DataSet^  dSet);
        
        /// <remarks/>
        public: System::IAsyncResult^  BeginUpdateAuthors(System::Data::DataSet^  dSet, System::AsyncCallback^  callback, 
                    System::Object^  asyncState);
        
        /// <remarks/>
        public: System::Void EndUpdateAuthors(System::IAsyncResult^  asyncResult);
        
        /// <remarks/>
        public: System::Void UpdateAuthorsAsync(System::Data::DataSet^  dSet);
        
        /// <remarks/>
        public: System::Void UpdateAuthorsAsync(System::Data::DataSet^  dSet, System::Object^  userState);
        
        private: System::Void OnUpdateAuthorsOperationCompleted(System::Object^  arg);
        
        /// <remarks/>
        public: System::Void CancelAsync(System::Object^  userState) new;
    };
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.1432"), 
    System::Diagnostics::DebuggerStepThroughAttribute, 
    System::ComponentModel::DesignerCategoryAttribute(L"code")]
    public ref class GetAuthorsCompletedEventArgs : public System::ComponentModel::AsyncCompletedEventArgs {
        
        private: cli::array< System::Object^  >^  results;
        
        internal: GetAuthorsCompletedEventArgs(cli::array< System::Object^  >^  results, System::Exception^  exception, System::Boolean cancelled, 
                    System::Object^  userState);
        /// <remarks/>
        public: property System::Data::DataSet^  Result {
            System::Data::DataSet^  get();
        }
    };
}
namespace AuthorWS {
    
    
    inline AuthorClass::AuthorClass() {
        this->Url = L"http://localhost/AuthorWS/Author.asmx";
    }
    
    inline System::Data::DataSet^  AuthorClass::GetAuthors() {
        cli::array< System::Object^  >^  results = this->Invoke(L"GetAuthors", gcnew cli::array< System::Object^  >(0));
        return (cli::safe_cast<System::Data::DataSet^  >(results[0]));
    }
    
    inline System::IAsyncResult^  AuthorClass::BeginGetAuthors(System::AsyncCallback^  callback, System::Object^  asyncState) {
        return this->BeginInvoke(L"GetAuthors", gcnew cli::array< System::Object^  >(0), callback, asyncState);
    }
    
    inline System::Data::DataSet^  AuthorClass::EndGetAuthors(System::IAsyncResult^  asyncResult) {
        cli::array< System::Object^  >^  results = this->EndInvoke(asyncResult);
        return (cli::safe_cast<System::Data::DataSet^  >(results[0]));
    }
    
    inline System::Void AuthorClass::GetAuthorsAsync() {
        this->GetAuthorsAsync(nullptr);
    }
    
    inline System::Void AuthorClass::GetAuthorsAsync(System::Object^  userState) {
        if (this->GetAuthorsOperationCompleted == nullptr) {
            this->GetAuthorsOperationCompleted = gcnew System::Threading::SendOrPostCallback(this, &AuthorWS::AuthorClass::OnGetAuthorsOperationCompleted);
        }
        this->InvokeAsync(L"GetAuthors", gcnew cli::array< System::Object^  >(0), this->GetAuthorsOperationCompleted, userState);
    }
    
    inline System::Void AuthorClass::OnGetAuthorsOperationCompleted(System::Object^  arg) {
        {
            System::Web::Services::Protocols::InvokeCompletedEventArgs^  invokeArgs = (cli::safe_cast<System::Web::Services::Protocols::InvokeCompletedEventArgs^  >(arg));
            this->GetAuthorsCompleted(this, (gcnew AuthorWS::GetAuthorsCompletedEventArgs(invokeArgs->Results, invokeArgs->Error, 
                    invokeArgs->Cancelled, invokeArgs->UserState)));
        }
    }
    
    inline System::Void AuthorClass::UpdateAuthors(System::Data::DataSet^  dSet) {
        this->Invoke(L"UpdateAuthors", gcnew cli::array< System::Object^  >(1) {dSet});
    }
    
    inline System::IAsyncResult^  AuthorClass::BeginUpdateAuthors(System::Data::DataSet^  dSet, System::AsyncCallback^  callback, 
                System::Object^  asyncState) {
        return this->BeginInvoke(L"UpdateAuthors", gcnew cli::array< System::Object^  >(1) {dSet}, callback, asyncState);
    }
    
    inline System::Void AuthorClass::EndUpdateAuthors(System::IAsyncResult^  asyncResult) {
        this->EndInvoke(asyncResult);
    }
    
    inline System::Void AuthorClass::UpdateAuthorsAsync(System::Data::DataSet^  dSet) {
        this->UpdateAuthorsAsync(dSet, nullptr);
    }
    
    inline System::Void AuthorClass::UpdateAuthorsAsync(System::Data::DataSet^  dSet, System::Object^  userState) {
        if (this->UpdateAuthorsOperationCompleted == nullptr) {
            this->UpdateAuthorsOperationCompleted = gcnew System::Threading::SendOrPostCallback(this, &AuthorWS::AuthorClass::OnUpdateAuthorsOperationCompleted);
        }
        this->InvokeAsync(L"UpdateAuthors", gcnew cli::array< System::Object^  >(1) {dSet}, this->UpdateAuthorsOperationCompleted, 
            userState);
    }
    
    inline System::Void AuthorClass::OnUpdateAuthorsOperationCompleted(System::Object^  arg) {
        {
            System::Web::Services::Protocols::InvokeCompletedEventArgs^  invokeArgs = (cli::safe_cast<System::Web::Services::Protocols::InvokeCompletedEventArgs^  >(arg));
            this->UpdateAuthorsCompleted(this, (gcnew System::ComponentModel::AsyncCompletedEventArgs(invokeArgs->Error, invokeArgs->Cancelled, 
                    invokeArgs->UserState)));
        }
    }
    
    inline System::Void AuthorClass::CancelAsync(System::Object^  userState) {
        __super::CancelAsync(userState);
    }
    
    
    inline GetAuthorsCompletedEventArgs::GetAuthorsCompletedEventArgs(cli::array< System::Object^  >^  results, System::Exception^  exception, 
                System::Boolean cancelled, System::Object^  userState) : 
            System::ComponentModel::AsyncCompletedEventArgs(exception, cancelled, userState) {
        this->results = results;
    }
    
    inline System::Data::DataSet^  GetAuthorsCompletedEventArgs::Result::get() {
        this->RaiseExceptionIfNecessary();
        return (cli::safe_cast<System::Data::DataSet^  >(this->results[0]));
    }
}
